import {Predicate, Transform} from './operators/interface.js';
import {filter} from './operators/filter.js';
import {chunk} from './operators/chunk.js';
import {debounce} from './operators/debounce.js';
import {map} from './operators/map.js';
import {take} from './operators/take.js';
import {until} from './operators/until.js';

export interface OverAsyncIterator<T> extends AsyncIterable<T> {
    filter(predicate: Predicate<T>): OverAsyncIterator<T>;
    map<R>(transform: (value: T) => R): OverAsyncIterator<R>;
    chunk(size: number): OverAsyncIterator<T[]>;
    debounce(ms: number): OverAsyncIterator<T[]>;
    take(count: number): OverAsyncIterator<T>;
    until(predicate: Predicate<T>): OverAsyncIterator<T>;
}

export function over<T>(iterable: AsyncIterable<T>): OverAsyncIterator<T> {
    return {
        filter(predicate: Predicate<T>): OverAsyncIterator<T> {
            return over(filter(iterable, predicate));
        },

        map<R>(transform: Transform<T, R>): OverAsyncIterator<R> {
            return over(map(iterable, transform));
        },

        chunk(size: number): OverAsyncIterator<T[]> {
            return over(chunk(iterable, size));
        },

        debounce(ms: number): OverAsyncIterator<T[]> {
            return over(debounce(iterable, ms));
        },

        take(count: number): OverAsyncIterator<T> {
            return over(take(iterable, count));
        },

        until(predicate: (value: T) => boolean): OverAsyncIterator<T> {
            return over(until(iterable, predicate));
        },

        [Symbol.asyncIterator]() {
            return iterable[Symbol.asyncIterator]();
        },
    };
}
