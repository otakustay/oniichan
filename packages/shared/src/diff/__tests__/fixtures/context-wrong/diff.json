[
  {
    "changes": [
      { "type": "normal", "content": "import {chunk} from './operators/chunk.js';" },
      { "type": "normal", "content": "import {debounce} from './operators/debounce.js';" },
      { "type": "normal", "content": "import {filter} from './operators/filter.js';" },
      { "type": "insert", "content": "import {flatMap} from './operators/flatMap.js';" },
      { "type": "normal", "content": "import {map} from './operators/map.js';" },
      { "type": "normal", "content": "import {take} from './operators/take.js';" },
      { "type": "normal", "content": "" },
      { "type": "normal", "content": "export interface OverAsyncIterator<T> extends AsyncIterable<T> {" },
      { "type": "normal", "content": "    filter(predicate: Predicate<T>): OverAsyncIterator<T>;" },
      { "type": "normal", "content": "    map<R>(transform: (value: T) => R): OverAsyncIterator<R>;" },
      {
        "type": "insert",
        "content": "    flatMap<R>(transform: (value: T) => AsyncIterable<R> | Iterable<R> | Promise<AsyncIterable<R> | Iterable<R>>): OverAsyncIterator<R>;"
      },
      { "type": "normal", "content": "    chunk(size: number): OverAsyncIterator<T[]>;" },
      { "type": "normal", "content": "    debounce(ms: number): OverAsyncIterator<T[]>;" },
      { "type": "normal", "content": "    take(count: number): OverAsyncIterator<T>;" }
    ]
  }
]
