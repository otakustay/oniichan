# Oniichan Coding Assistant

This is the main repository for the [Oniichan Coding Assistant](https://marketplace.visualstudio.com/items?itemName=otakustay.oniichan) VSCode extension.

## Project Structure

- `shared`: Shared codebase including model access, utility functions, and shared types.
- `vscode`: Source code for the VSCode extension.
- `kernel`: Contains core logic decoupled from VSCode API, designed to work in isolated environments (threads, processes, or even remote).
- `editor-host`: Exposes VSCode capabilities required by core logic to the `kernel` module.
- `storage`: Provides local data persistence capabilities. All persistence-related operations must use functions from this module, direct file or database operations are not allowed.
- `web`: A React application that communicates with the server via WebSocket after being bundled, accessible through the plugin's web page interface.
- `web-host`: Exposes capabilities in the web system for IDE, `kernel`, and other components to call, enabling external control of page elements.

> Why such a complex structure?

This project not only provides features that I find useful but also serves as a validation of a technical solution:

- If my `kernel` can run in a separate process, I can achieve logic reuse across multiple IDEs like VSCode and JetBrains.
- If it can not only run in an independent process but also provide CLI access or listen on an HTTP port, it can be accessed by more non-IDE applications.
- This makes it possible to create a ChatGPT Desktop-like application that isn't exclusively tied to VSCode.
- I could even have the IDE and `kernel` run remotely, then access the services provided by the `kernel` through a browser, creating a universal Q&A bot based on code repositories in code hosting systems.

Therefore, this project naturally allows IDE-decoupled logic to run in separate environments through the `kernel` module (although it currently runs in the same process as VSCode, it can be easily switched), using `host` to implement the connection between VSCode and `kernel` (if connecting to JetBrains, just implement the same interface).

## Release Process

1. Update `packages/vscode/CHANGELOG.md` to maintain the changelog manually.
2. Run `npm run release` to automatically update version numbers and generate commits and tags.
3. Execute `vsce publish --no-dependencies` in the `packages/vscode` directory to publish.
