import type {RawToolCallParameter} from '@oniichan/shared/inbox';
import type {CompleteTaskParameter, ToolDescription} from '@oniichan/shared/tool';
import dedent from 'dedent';
import type {ToolExecuteResult} from '../tool';
import {ToolProviderBase, asString} from '../tool';

export const completeTask: ToolDescription = {
    name: 'complete_task',
    description:
        'When you confirm the task given is completed, use this tool to finish your work, provide a confidence value. This tool is a hidden tool, user will not get any insight when this tool get executed, so do not leak the tool name or its paramters outside the tool call XML tag.',
    parameters: {
        type: 'object',
        properties: {
            confidence: {
                type: 'number',
                description:
                    'The confidence value as you regard yourself completely fulfilled this task, an integer from 0 to 100, larger number means more confident',
            },
        },
        required: ['confidence'],
    },
    usage: dedent`
        <complete_task>
            <confidence>87</confidence>
        </complete_task>
    `,
};

interface Extracted {
    confidence: number | undefined;
}

export class CompleteTaskToolImplement extends ToolProviderBase<CompleteTaskParameter, Extracted> {
    async executeApprove(): Promise<ToolExecuteResult> {
        const plan = this.roundtrip.findLastToolCallChunkByToolNameStrict('create_plan');
        const executingIndex = plan.arguments.tasks.findIndex(v => v.status === 'executing');
        plan.arguments.tasks[executingIndex].status = 'completed';
        const nextTask = plan.arguments.tasks[executingIndex + 1];

        if (nextTask) {
            nextTask.status = 'executing';
        }

        if (nextTask) {
            return {
                type: 'success',
                finished: false,
                executionData: {task: nextTask.text},
                template: dedent`
                    The last task has been successfully completed, now you should start working on this task:

                    {{task}}
                `,
            };
        }

        return {
            type: 'success',
            finished: false,
            executionData: {userRequest: this.roundtrip.getRequestText()},
            template: dedent`
                Please review all information provided, now you need to decide if user\'s request is fully satisfied.

                If the original request is fully satisfied, use \`attempt_completion\` tool to finish this task with a user friendly conslusion, everything will stop after this.

                Otherwise, you should create a new plan in a via \`create_plan\` tool to continue our workflow, even though there are previous \`create_plan\` calls, you are welcome to use \`create_plan\` again to continue fulfilling user\'s request.

                Be very serious to check the status of user request\'s fulfillment, make sure every aspect is covered, all required information is provided, all necessary code edits are performed.

                You may see some XML tags with different tools in previous messages, they are generated by your partener to take some action to completing a task, but you should not respond with these tools other than \`create_plan\` or \`attempt_completion\`.

                If some of user\'s request are not satisfied, such as lack of code edits or result validation, use \`creat_plan\` tool to fire a new plan.

                To recall, this is the original user request:

                {{userRequest}}

                Let\'s now start a new plan! You can reject to create the plan only if you believe everything is done.
            `,
        };
    }

    extractParameters(generated: Record<string, RawToolCallParameter>): Extracted {
        const confidence = parseInt(asString(generated.confidence) ?? '', 10);
        return {
            confidence: isNaN(confidence) ? undefined : confidence,
        };
    }

    parseParameters(extracted: Extracted): CompleteTaskParameter {
        return {
            confidence: extracted.confidence ?? 0,
        };
    }
}
