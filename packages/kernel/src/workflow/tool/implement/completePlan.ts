import {CompletePlanParameter} from '@oniichan/shared/tool';
import {ToolImplementBase, ToolExecuteResult} from './base';

export class CompletePlanToolImplement extends ToolImplementBase<CompletePlanParameter> {
    async executeApprove(): Promise<ToolExecuteResult> {
        const paragraphs = [
            'The latest plan is finished, please review all information. Now you need to decide if user\'s request is fully satisfied.',
            'If the original request is fully satisfied, use a <conclusion> tag to conclude this task, everything will stop after this.',
            'Otherwise, you should create a new plan in a <plan> tag to continue our workflow.',
            'Be very serious to check the status of user request\'s fulfillment, make sure every aspect is covered, all required information is provided, all necessary code edits are performed.',
            'You may see some XML tags in previous messages, they are generated by your partener to take some action to completing a task, but you should not respond with those XML tags other than <plan> or <conclusion>.',
            'To recall, this is the original user request, be sure all its requirements are fulfilled before using <conclusion> tag, otherwise use <plan> tag:',
            this.roundtrip.getRequestText(),
        ];
        return {
            type: 'success',
            finished: false,
            output: paragraphs.join('\n\n'),
        };
    }

    extractParameters(generated: Record<string, string | undefined>): Partial<CompletePlanParameter> {
        return {
            numberOfTasks: parseInt(generated.numberOfTasks ?? '', 10) || undefined,
        };
    }
}
