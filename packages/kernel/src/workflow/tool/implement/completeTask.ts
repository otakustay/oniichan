import type {CompleteTaskParameter} from '@oniichan/shared/tool';
import type {RawToolCallParameter} from '@oniichan/shared/inbox';
import {ToolImplementBase} from './base';
import type {ToolExecuteResult} from './base';
import {asString} from './utils';

interface Extracted {
    confidence: number | undefined;
}

export class CompleteTaskToolImplement extends ToolImplementBase<CompleteTaskParameter, Extracted> {
    async executeApprove(): Promise<ToolExecuteResult> {
        const plan = this.roundtrip.findLastToolCallChunkByToolNameStrict('create_plan');
        const executingIndex = plan.arguments.tasks.findIndex(v => v.status === 'executing');
        plan.arguments.tasks[executingIndex].status = 'completed';
        const nextTask = plan.arguments.tasks[executingIndex + 1];

        if (nextTask) {
            nextTask.status = 'executing';
        }

        const paragraphs = nextTask
            ? [
                'The last task has been successfully completed, now you should start working on this task:',
                nextTask.text,
            ]
            : [
                'Please review all information provided, now you need to decide if user\'s request is fully satisfied.',
                'If the original request is fully satisfied, use `attempt_completion` tool to finish this task with a user friendly conslusion, everything will stop after this.',
                'Otherwise, you should create a new plan in a via `create_plan` tool to continue our workflow, even though there are previous `create_plan` calls, you are welcome to use `create_plan` again to continue fulfilling user\'s request.',
                'Be very serious to check the status of user request\'s fulfillment, make sure every aspect is covered, all required information is provided, all necessary code edits are performed.',
                'You may see some XML tags with different tools in previous messages, they are generated by your partener to take some action to completing a task, but you should not respond with these tools other than `create_plan` or `attempt_completion`.',
                'If some of user\'s request are not satisfied, such as lack of code edits or result validation, use `creat_plan` tool to fire a new plan.',
                'To recall, this is the original user request:',
                this.roundtrip.getRequestText(),
                'Let\'s now start a new plan! You can reject to create the plan only if you believe everything is done.',
            ];
        return {
            type: 'success',
            finished: false,
            output: paragraphs.join('\n\n'),
        };
    }

    extractParameters(generated: Record<string, RawToolCallParameter>): Extracted {
        const confidence = parseInt(asString(generated.confidence) ?? '', 10);
        return {
            confidence: isNaN(confidence) ? undefined : confidence,
        };
    }

    parseParameters(extracted: Extracted): CompleteTaskParameter {
        return {
            confidence: extracted.confidence ?? 0,
        };
    }
}
